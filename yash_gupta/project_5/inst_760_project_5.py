# -*- coding: utf-8 -*-
"""inst_760_project_5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Y6tB3IEm39aDowu6l4Zsa9hXJJfaEAd
"""

#Jupter because of Google Colab
!pip install jupyter-dash
from jupyter_dash import JupyterDash

from dash import dcc, html, Input, Output
import pandas as pd
import plotly.express as px

df = pd.read_csv("CarRentalData.csv")
df.head()

app = JupyterDash(__name__)

app.layout = html.Div([
    html.H1("Car Rental Data Dashboard", style={"textAlign": "center"}),

    html.Div([
        html.Div([
            html.Label("Filter by Vehicle Make:"),
            dcc.Dropdown(
                id="make-filter",
                options=[{"label": m, "value": m} for m in sorted(df["vehicle.make"].dropna().unique())],
                value=None,
                placeholder="All Makes"
            )
        ], style={"width": "45%", "display": "inline-block", "margin": "10px"}),

        html.Div([
            html.Label("Filter by Vehicle Year:"),
            dcc.Dropdown(
                id="year-filter",
                options=[{"label": y, "value": y} for y in sorted(df["vehicle.year"].dropna().unique())],
                value=None,
                placeholder="All Years"
            )
        ], style={"width": "45%", "display": "inline-block", "margin": "10px"})
    ]),
    html.Div([
        dcc.Graph(id="rating-hist"),
        dcc.Graph(id="trips-bar"),
        dcc.Graph(id="daily-rate-bar"),
        dcc.Graph(id="rating-vs-trips"),
        dcc.Graph(id="reviews-by-make")
    ])
])

@app.callback(
    Output("rating-hist", "figure"),
    Output("trips-bar", "figure"),
    Output("daily-rate-bar", "figure"),
    Output("rating-vs-trips", "figure"),
    Output("reviews-by-make", "figure"),
    Input("make-filter", "value"),
    Input("year-filter", "value")
)
def update_graphs(selected_make, selected_year):
    filtered = df.copy()
    if selected_make:
        filtered = filtered[filtered["vehicle.make"] == selected_make]
    if selected_year:
        filtered = filtered[filtered["vehicle.year"] == selected_year]

    # Histogram for the ratings
    fig_1 = px.histogram(filtered, x="rating", nbins=20, title="Distribution of Car Ratings")

    # Bar chart for total trips by type of vehicle
    trips_by_type = filtered.groupby("vehicle.type")["renterTripsTaken"].sum().reset_index()
    fig_2 = px.bar(trips_by_type, x="vehicle.type", y="renterTripsTaken", title="Total Trips by Vehicle Type")

    # Bar chart for average daily rate by fuel type
    fig_3 = px.bar(filtered, x="fuelType", y="rate.daily", color="vehicle.type",
                  title="Average Daily Rental Rate by Fuel Type", barmode="group")

    # Scatter plot for rating vs. trips
    fig_4 = px.scatter(filtered, x="rating", y="renterTripsTaken", title="Rating vs. Trips Taken")

    # Bar chart for number of reviews by vehicle make
    reviews_by_make = filtered.groupby("vehicle.make")["reviewCount"].sum().reset_index()
    fig_5 = px.bar(reviews_by_make, x="vehicle.make", y="reviewCount", title="Number of Reviews by Vehicle Make")

    return fig_1, fig_2, fig_3, fig_4, fig_5

app.run(debug="true")