# -*- coding: utf-8 -*-
"""inst_760_project_4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Y6tB3IEm39aDowu6l4Zsa9hXJJfaEAd
"""

#Jupter because of Google Colab
!pip install jupyter-dash
from jupyter_dash import JupyterDash

from dash import dcc, html, Input, Output
import pandas as pd
import plotly.express as px

df = pd.read_csv("Netflix.csv")
df.head()

def netflix_rating_groups(r):
    if r in ['G', 'TV-G', 'TV-Y']:
        return 'General'
    elif r in ['PG', 'PG-13', 'TV-PG', 'TV-Y7']:
        return 'Teen'
    elif r in ['R', 'TV-MA', 'NC-17']:
        return 'Mature'
    else:
        return 'Other'

df["group_rating"] = df["rating"].apply(netflix_rating_groups)
df["duration_mins"] = df["duration"].str.extract(r"(\d+)").astype(float)


app = JupyterDash(__name__)

app.layout = html.Div([
    html.H1("Netflix Media: Duration vs. Release Year", style={"textAlign": "center"}),


    html.Div([
        html.Label("Select Rating Groups:"),
        dcc.Dropdown(
            options=[{"label": g, "value": g} for g in df["group_rating"].unique()],
            value=df["group_rating"].unique().tolist(),
            multi=True,
            id="rating_filter"
        )
    ], style={"width": "40%", "margin": "10px"}),


    html.Div([
        html.Label("Select Media Type:"),
dcc.Checklist(
    options=[{"label": t, "value": t} for t in df["type"].unique()],
    value=df["type"].unique().tolist(),
    inline=True,
    id="type_filter"
)
    ], style={"margin": "10px"}),

    # Make scatterplot
    dcc.Graph(id="scatter_plot")
])


@app.callback(
    Output("scatter_plot", "figure"),
    Input("rating_filter", "value"),
     Input("type_filter", "value")
)
def update_graph(selected_ratings, selected_types):
    filtered = df[df["group_rating"].isin(selected_ratings) & df["type"].isin(selected_types)]

    fig = px.scatter(
        filtered,
        x="release_year",
        y="duration_mins",
        color="group_rating",
        symbol="type",
        hover_data=["title", "director", "cast"],
        opacity=0.8
    )
    fig.update_layout(
        title="Netflix Media: Duration vs. Release Year",
        xaxis_title="Release Year",
        yaxis_title="Duration (in minutes)",
        legend_title="Rating Group , Media Type",
    )
    return fig

if __name__ == "__main__":
    app.run(debug=True)