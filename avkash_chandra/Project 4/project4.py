# -*- coding: utf-8 -*-
"""Project4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1toyaAAc7_2T2h1-9VaHG6RpClYPBdXrF
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the 2019 World Happiness data
df = pd.read_csv("2019.csv")

df.columns

!pip install dash
!pip install pandas
!pip install plotly

import pandas as pd
import plotly.express as px
import dash
from dash import dcc, html
from dash.dependencies import Input, Output

# Load data
df = pd.read_csv("2019.csv")  # add this to collab everytime

# Initialize Dash app
app = dash.Dash(__name__)

# Initialize Dash app
app = dash.Dash(__name__)

# App layout
app.layout = html.Div([
    html.H1(
        "World Happiness Report 2019 Dashboard",
        style={'textAlign': 'center', 'color': '#1b1b1b', 'font-size': '32px'}
    ),

    # Happiness Score Slider
    html.Div([
        html.Label("Minimum Happiness Score:", style={'font-weight': 'bold'}),
        dcc.Slider(
            id='score-filter',
            min=df['Score'].min(),
            max=df['Score'].max(),
            step=0.1,
            value=df['Score'].min(),
            marks={
                round(s,1): str(round(s,1))
                for s in [df['Score'].min(), df['Score'].median(), df['Score'].max()]
            },
            tooltip={"placement": "bottom", "always_visible": True}
        ),
    ], style={'width': '80%', 'margin': '20px auto'}),

    # Freedom Slider
    html.Div([
        html.Label("Minimum Freedom Score:", style={'font-weight': 'bold'}),
        dcc.Slider(
            id='freedom-filter',
            min=df['Freedom to make life choices'].min(),
            max=df['Freedom to make life choices'].max(),
            step=0.01,
            value=df['Freedom to make life choices'].min(),
            marks={
                round(s,2): str(round(s,2))
                for s in [df['Freedom to make life choices'].min(),
                          df['Freedom to make life choices'].median(),
                          df['Freedom to make life choices'].max()]
            },
            tooltip={"placement": "bottom", "always_visible": True}
        ),
    ], style={'width': '80%', 'margin': '20px auto'}),

    # Country Dropdown (starts empty for less clutter)
    html.Div([
        html.Label("Select Countries:", style={'font-weight': 'bold'}),
        dcc.Dropdown(
            id='country-filter',
            options=[{'label': c, 'value': c} for c in df['Country or region'].sort_values().unique()],
            multi=True,
            placeholder="Select one or more countries",
            value=None  # start with nothing selected
        ),
    ], style={'width': '80%', 'margin': '20px auto'}),

    # Scatter plot
    dcc.Graph(id='scatter-plot')
])

# Callback to update scatter plot
@app.callback(
    Output("scatter-plot", "figure"),
    Input("score-filter", "value"),
    Input("freedom-filter", "value"),
    Input("country-filter", "value")
)
def update_graph(min_score, min_freedom, selected_countries):
    # Filter by scores
    filtered_df = df[
        (df['Score'] >= min_score) &
        (df['Freedom to make life choices'] >= min_freedom)
    ]

    # Filter by selected countries (if certain ones)
    if selected_countries:
        filtered_df = filtered_df[filtered_df['Country or region'].isin(selected_countries)]

    # Create scatter plot
    fig = px.scatter(
        filtered_df,
        x='GDP per capita',
        y='Healthy life expectancy',
        size='Score',
        color='Freedom to make life choices',
        color_continuous_scale='RdBu',
        range_color=[df['Freedom to make life choices'].min(), df['Freedom to make life choices'].max()],
        hover_name='Country or region',
        hover_data={
            'GDP per capita': ':.2f',
            'Healthy life expectancy': ':.2f',
            'Score': ':.2f',
            'Freedom to make life choices': ':.2f'
        },
        size_max=20,
        title=f"Countries with Happiness ≥ {min_score} & Freedom ≥ {min_freedom}"
    )

    fig.update_layout(
        xaxis_title="GDP per Capita",
        yaxis_title="Healthy Life Expectancy",
        template='plotly_white',
        coloraxis_colorbar=dict(title="Freedom Level")
    )

    return fig

# Run app
if __name__ == '__main__':
    app.run(debug=True)

"""Interactive Features:

Happiness Score Slider: Filters countries by minimum happiness.

Freedom Score Slider: Filters countries by minimum freedom.

Country Dropdown: Select one or more countries to focus on for the map.

Hover & Zoom: Hover shows details; zoom/pan to explore data, autoscale icon to pan back to start of the map.


"""