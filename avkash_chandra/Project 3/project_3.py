# -*- coding: utf-8 -*-
"""Project 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/avkash10/project-3.c187a85e-13e1-4bba-a9fd-f033b9147d23.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250810/auto/storage/goog4_request%26X-Goog-Date%3D20250810T202223Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D1a382dbff80a906c854fe650cc25662de44ca6dbf946f84b2249af95fbff61dd3918121f7ec6ace5608be0ae01e65471a79da06e4c3e3a420392fcd38ec98b1ae8ca22a3822804021730746c878c45c0c0550e5ccd016d952d6ff77d0a4a042ccaaa97f4eb65fb529ca4ff5fd33970ad6d4f243003c0e41bbe20c13203e616daa223e4d7dd7adce8eba789c177b9825ae6e25bca75750bb379e1e3e4e2a6a2d4482a1de9debf87768073b1b42dbf7128076c4a72e5eaa1be3df6f43076c33a159eca30f8dc2acc47c6f09b8b613ea4a675dab6d6eb9041647364cf5ef69ef509fdb10b358db7088410226e8905738c061e6c82ac1f43b9987b9ec9aaa85fdd08
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
shivamb_netflix_shows_path = kagglehub.dataset_download('shivamb/netflix-shows')

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter

# Load the Netflix dataset
netflix_df = pd.read_csv('/kaggle/input/netflix-shows/netflix_titles.csv')

# Convert the date_added column to datetime format and drop rows with missing dates
netflix_df['date_added'] = pd.to_datetime(netflix_df['date_added'], errors='coerce')
netflix_df = netflix_df.dropna(subset=['date_added'])

# Extract year and month from the date_added column for trend analysis
netflix_df['year_added'] = netflix_df['date_added'].dt.year
netflix_df['month_added'] = netflix_df['date_added'].dt.month

# ---------- PLOT 1: Growth Over Time ----------
titles_per_year = netflix_df.groupby('year_added').size()

plt.figure(figsize=(9,5))
sns.barplot(x=titles_per_year.index.astype(str), y=titles_per_year.values, palette='Reds_r')
plt.title("Growth Over Time", fontsize=14)
plt.suptitle("Netflix’s library has exploded since 2015, with content growth surging after a strategic shift.", fontsize=10)
plt.xlabel("Year Added")
plt.ylabel("Number of Titles")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("plot1_growth.png")
plt.show()

# ---------- PLOT 2: Top Genres ----------
all_genres = netflix_df['listed_in'].dropna().str.split(', ').explode()
genre_counts = Counter(all_genres)
top_10_genres = genre_counts.most_common(10)
genres, counts = zip(*top_10_genres)

plt.figure(figsize=(10,6))
sns.barplot(x=list(counts), y=list(genres), palette='Purples_r', orient='h')
plt.title("Genre Popularity", fontsize=14)
plt.suptitle("International content and Drama dominate, reflecting Netflix’s global storytelling reach.", fontsize=10)
plt.xlabel("Number of Titles")
plt.ylabel("Genre")
plt.tight_layout()
plt.savefig("plot2_genres.png")
plt.show()

# ---------- PLOT 3: Duration by Rating ----------
# Get numeric duration values from the duration column
netflix_df['duration_num'] = pd.to_numeric(netflix_df['duration'].str.extract('(\d+)')[0], errors='coerce')

# Filter only movies with valid duration and rating
movies_df = netflix_df[(netflix_df['type'] == 'Movie') & (netflix_df['duration_num'].notna()) & (netflix_df['rating'].notna())]

plt.figure(figsize=(12,7))
sns.stripplot(x='rating', y='duration_num', data=movies_df, jitter=True, alpha=0.5, color='dodgerblue')
sns.boxplot(x='rating', y='duration_num', data=movies_df, showcaps=False, boxprops={'facecolor':'None'},
            showfliers=False, whiskerprops={'linewidth':0}, color='gray')
plt.title("Duration by Rating", fontsize=14)
plt.suptitle("Family films are shorter, while mature-rated movies generally have longer runtimes.", fontsize=10)
plt.xlabel("Content Rating")
plt.ylabel("Duration (minutes)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("plot3_durations.png")
plt.show()

# ---------- PLOT 4: Monthly Release Trends ----------
titles_per_month = netflix_df.groupby('month_added').size()

plt.figure(figsize=(9,5))
sns.lineplot(x=titles_per_month.index, y=titles_per_month.values, marker='o', color='darkorange')
plt.title("Seasonal Trends", fontsize=14)
plt.suptitle("Netflix releases most new content between June and August to capture summer viewers.", fontsize=10)
plt.xlabel("Month Added")
plt.ylabel("Number of Titles")
plt.xticks(range(1,13), ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])
plt.tight_layout()
plt.savefig("plot4_months.png")
plt.show()

# ---------- PLOT 5: Movies vs TV Shows Over Time ----------
content_counts = netflix_df.groupby(['year_added', 'type']).size().unstack().fillna(0)

plt.figure(figsize=(12,7))
content_counts.plot(kind='line', marker='o', ax=plt.gca())
plt.title("Movies vs. TV Shows", fontsize=14)
plt.suptitle("Though TV shows have grown since 2015, movies still make up the majority of releases.", fontsize=10)
plt.xlabel("Year Added")
plt.ylabel("Number of Titles")
plt.legend(title='Content Type')
plt.tight_layout()
plt.savefig("plot5_types.png")
plt.show()