# -*- coding: utf-8 -*-
"""Project5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rV0N7XMJl8nLuBoP2FAlKqD5ui4OVtun
"""

!pip install dash plotly kaleido

import pandas as pd
import numpy as np
import plotly.express as px
import dash
from dash import dcc, html
from dash.dependencies import Input, Output

# ---------- Load & clean ----------
df = pd.read_csv("nba_salaries.csv")
df.columns = df.columns.str.strip()
if 'Unnamed: 0' in df.columns:
    df = df.drop(columns=['Unnamed: 0'])

# Clean Salary
df['Salary'] = df['Salary'].astype(str).str.replace(r'[\$,]', '', regex=True).astype(float)

# Numeric columns
num_cols = ['Age','GP','GS','MP','FG','FGA','FG%','3P','3PA','3P%','2P','2PA','2P%',
            'eFG%','FT','FTA','FT%','ORB','DRB','TRB','AST','STL','BLK','TOV','PF','PTS']
for c in num_cols:
    if c in df.columns:
        df[c] = pd.to_numeric(df[c], errors='coerce')

# Normalize Teams and Positions
df['Team'] = df['Team'].str.split('/').str[0]
df['Position'] = df['Position'].str.split('-').str[0]

# ---------- Define Salary Tier ----------
def salary_tier(s):
    if s < 1000000:
        return 'Low'
    elif s < 5000000:
        return 'Medium'
    elif s < 10000000:
        return 'High'
    else:
        return 'Very High'

df['Salary_Tier'] = df['Salary'].apply(salary_tier)

# ---------- Define MPG/GP bins ----------
df['MPG_Bin'] = pd.cut(df['MP'], bins=[0,10,20,30,40,50,60],
                       labels=['0-10','10-20','20-30','30-40','40-50','50-60'])
df['GP_Bin'] = pd.cut(df['GP'], bins=[0,20,40,60,80,100],
                      labels=['0-20','20-40','40-60','60-80','80-100'])

# ---------- App ----------
app = dash.Dash(__name__)

# ---------- Layout ----------
app.layout = html.Div([
    # Top Title
    html.Div([
        html.H1("NBA Salaries vs Performance",
                style={'textAlign':'center','color':'#1b1b1b','marginBottom':'20px'})
    ], style={'width':'100%','backgroundColor':'white','padding':'10px'}),

    # Main Content
    html.Div([
        # Left column: Filters
        html.Div([
            html.H2("Filters", style={'textAlign':'center'}),
            html.Label("Team"),
            dcc.Dropdown(
                id='team',
                options=[{'label': t, 'value': t} for t in sorted(df['Team'].dropna().unique())],
                multi=True, placeholder="All teams"
            ),
            html.Br(),
            html.Label("Position"),
            dcc.Dropdown(
                id='pos',
                options=[{'label': p, 'value': p} for p in sorted(df['Position'].dropna().unique())],
                multi=True, placeholder="All positions"
            ),
            html.Br(),
            html.Label("Age range"),
            dcc.RangeSlider(
                id='age',
                min=int(np.nanmin(df['Age'])), max=int(np.nanmax(df['Age'])),
                step=4,
                value=[int(np.nanmin(df['Age'])), int(np.nanmax(df['Age']))],
                tooltip={'always_visible':False}
            ),
            html.Br(),
            html.Label("Min GP"),
            dcc.Slider(id='min_gp', min=0, max=int(np.nanmax(df['GP'])), value=0, step=20,
                       tooltip={'always_visible':False}),
            html.Br(),
            html.Label("Min MP"),
            dcc.Slider(id='min_mp', min=0, max=int(np.nanmax(df['MP'])), value=0, step=10,
                       tooltip={'always_visible':False}),
        ], style={
            'position':'sticky',
            'top':'0',
            'width':'18%',
            'height':'90vh',
            'overflowY':'auto',
            'padding':'10px',
            'borderRight':'1px solid #ddd',
            'backgroundColor':'white'
        }),

        # Right column: Plots
        html.Div([
            dcc.Graph(id='plot1', style={'width':'100%','height':'400px','marginBottom':'20px'}),
            dcc.Graph(id='plot2', style={'width':'100%','height':'400px','marginBottom':'20px'}),
            dcc.Graph(id='plot3', style={'width':'100%','height':'400px','marginBottom':'20px'}),
            dcc.Graph(id='plot4', style={'width':'100%','height':'400px','marginBottom':'20px'}),
            dcc.Graph(id='plot5', style={'width':'100%','height':'400px','marginBottom':'20px'}),
        ], style={'width':'82%','padding':'10px','backgroundColor':'white'}),

    ], style={'display':'flex','width':'90%','margin':'0 auto','backgroundColor':'white'}),

], style={'backgroundColor':'white','minHeight':'100vh'})

# ---------- Filter function ----------
def apply_filters(df, team, pos, age, min_gp, min_mp):
    out = df.copy()
    if team:
        out = out[out['Team'].isin(team)]
    if pos:
        out = out[out['Position'].isin(pos)]
    if age:
        out = out[(out['Age'] >= age[0]) & (out['Age'] <= age[1])]
    out = out[(out['GP'] >= min_gp) & (out['MP'] >= min_mp)]
    return out

# ---------- Callback ----------
@app.callback(
    Output('plot1','figure'),
    Output('plot2','figure'),
    Output('plot3','figure'),
    Output('plot4','figure'),
    Output('plot5','figure'),
    Input('team','value'),
    Input('pos','value'),
    Input('age','value'),
    Input('min_gp','value'),
    Input('min_mp','value'),
)
def update(team,pos,age,min_gp,min_mp):
    d = apply_filters(df,team,pos,age,min_gp,min_mp)

    # ---------- Plot 1 ----------
    avg_salary = d.groupby("Position")["Salary"].mean().reset_index()
    avg_salary = avg_salary.sort_values("Salary", ascending=False)
    fig1 = px.bar(
        avg_salary, x='Position', y='Salary', text='Salary',
        title="Relationship Between Salary and Position<br><sup>Average pay differs sharply across positions</sup>"
    )
    fig1.update_traces(texttemplate='%{text:,.0f}', textposition='outside', showlegend=False)
    if not avg_salary.empty:
        ymax = float(avg_salary['Salary'].max())
        fig1.update_yaxes(range=[0, ymax*1.15])   # add headroom
    fig1.update_layout(margin=dict(t=110), template='plotly_white')

    # ---------- Plot 2 ----------
    agg2 = d.groupby(['Position','Salary_Tier']).agg({'PTS':'mean'}).reset_index()
    fig2 = px.bar(
        agg2, x='Position', y='PTS', color='Salary_Tier', barmode='group',
        title="Relationship Between Points and Position with Salary Tier<br><sup>Compare pay tiers within positions</sup>"
    )
    fig2.update_layout(template='plotly_white')

    # ---------- Plot 3 ----------
    fig3 = px.scatter(
        d, x='PTS', y='Salary', color='Position',
        hover_data=['Player Name','Team','MP','GP'],
        title="Salary vs Points<br><sup>Outlier individual points shows that scoring doesnâ€™t always match pay</sup>"
    )
    fig3.update_layout(template='plotly_white')

    # ---------- Plot 4 ----------
    if not d.empty:
        d['PTS_Tier'] = pd.qcut(d['PTS'], q=4, labels=['Low','Medium','High','Very High'])
    fig4 = px.scatter(
        d, x='MP', y='Salary', color='PTS_Tier' if not d.empty else None,
        hover_data=['Player Name','Team','Position','MP','PTS'],
        title="Salary vs Minutes Per Game<br><sup>Effect of playing time on pay</sup>"
    )
    fig4.update_layout(template='plotly_white')

    # ---------- Plot 5 ----------
    agg5 = d.dropna(subset=['MPG_Bin']).groupby(['Position','MPG_Bin']).agg({'Salary':'mean'}).reset_index()
    if not agg5.empty:
        bins_present = sorted(agg5['MPG_Bin'].unique(),
                              key=lambda x: ['0-10','10-20','20-30','30-40','40-50','50-60'].index(x))
        agg5['MPG_Bin'] = pd.Categorical(agg5['MPG_Bin'], categories=bins_present, ordered=True)
    fig5 = px.bar(
        agg5, x='Position', y='Salary', color='MPG_Bin', barmode='group',
        title="Impact of Playing Time by Position For Salary<br><sup>Playing time raises pay, but effect varies by position</sup>"
    )
    fig5.update_layout(template='plotly_white')

    return fig1, fig2, fig3, fig4, fig5

if __name__ == "__main__":
    app.run(debug=True)