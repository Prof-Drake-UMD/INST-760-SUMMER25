# -*- coding: utf-8 -*-
"""project_5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L49CrH4OdGOUZihjbLJjC5oBO3AWcGKF
"""

import pandas as pd
import plotly.express as px
import seaborn as sns
import dash
from dash import dcc, html
from dash.dependencies import Input, Output

# read csv file
df = pd.read_csv("fullshotsdata.csv")

# display first five rows
df.head()

# create the necessary filtered dataframes
goals_df = df[df['result'] == "Goal"]
top_actions = goals_df['lastAction'].value_counts().nlargest(5).index
filtered_goals = goals_df[goals_df['lastAction'].isin(top_actions)]

# for plot 4:
# create new column in df
df['is_goal'] = df['result'] == "Goal"

agg_df = df.groupby("minute", as_index=False)["is_goal"].mean()

# for plot 5:
# group by discussed categories
combo_group = df.groupby(['h_a', 'situation', 'shotType']).agg(
    total_shots=('is_goal', 'count'),
    goals=('is_goal', 'sum')
).reset_index()

# calculate conversion rate
combo_group['conversion_rate'] = combo_group['goals'] / combo_group['total_shots']


# get the top five highest conversion combos
top_combos = combo_group.sort_values('conversion_rate', ascending=False).head(5)

# create combined label for plotting
top_combos['combo'] = top_combos['h_a'] + " | " + top_combos['situation'] + " | " + top_combos['shotType']

# create initial figures
fig1 = px.bar(goals_df, x = "situation",
              color = "h_a",
              category_orders = {"situation": goals_df["situation"].value_counts().index})
fig1.update_traces(dict(marker_line_width=0)) # fix color fading

fig2 = px.bar(filtered_goals, x = "lastAction", color = "lastAction",
              title = "Relationship Between Last Action and Goal Count",
              labels={
                  "lastAction": "Last Action",   # new x-axis label
                  "count": "Goal Count"  # new y-axis label
    })

# add title and subtitle to fig 2
fig2.update_layout(
    title={
        'text': "Relationship Between Last Action and Goal Count<br><sup>Passes and crosses lead to goals",
        'x':0.5, 'xanchor': 'center'
    }
)
fig2.update_traces(dict(marker_line_width=0)) # fix color fading



fig3 = px.bar(goals_df, x = "shotType", color = "shotType",
              color_discrete_sequence=px.colors.qualitative.Vivid,
              labels={
                  "shotType": "Body Part Used",   # new x-axis label
                  "count": "Goal Count"  # new y-axis label
              })

# add title and subtitle to fig 3
fig3.update_layout(
    title={
        'text': "Relationship Between Body Part and Goal Count<br><sup>Right foot creates goals",
        'x':0.5, 'xanchor': 'center'
    }
)
fig3.update_traces(dict(marker_line_width=0)) # fix color fading

fig4 = px.line(agg_df, x = "minute", y = "is_goal")

fig5 = px.bar(top_combos, x = "conversion_rate", y = "combo",
              color = "combo",
              color_discrete_sequence = px.colors.qualitative.Vivid)


# initialize dash app and suppress callback exceptions
app = dash.Dash(__name__, suppress_callback_exceptions=True)

# create layout
app.layout = html.Div([
    html.H1("What Makes a Shot Go In?", style={"textAlign": "center", "backgroundColor": "white"}),

    # navigation links
    html.Div([
        dcc.Link("Home | ", href="/", style = {
            "padding": "6px 12px",
            "background color": "#ffa500",
            "color": "black",
            "borderRadius": "4px",
            "textDecoration": "none",
            "marginRight": "8px"
        }),  # HOME BUTTON
        dcc.Link("Situations | ", href="/situations"),
        dcc.Link("Last Actions | ", href="/last-actions"),
        dcc.Link("Shot Types | ", href="/shot-types"),
        dcc.Link("Conversions | ", href="/conversions"),
        dcc.Link("Top Combos | ", href="/top-combos")
    ], style={"textAlign": "center", "marginBottom": "20px",
              "backgroundColor": "white", "padding": "8px"}),


    # global filters
    html.Div([
        html.Div([
            html.Label("Filter by Home/Away:"),
            dcc.Dropdown(
                id="homeaway-dropdown",
                options = [
                    {"label": "Home", "value": "h"},
                    {"label": "Away", "value": "a"}
                ],
                value=None
            )
        ], style={"width": "40%", "display": "inline-block", "margin": "10px", "backgroundColor": "white"}),

        html.Div([
            html.Label("Filter by Conversion Rate:"),
            dcc.RangeSlider(
                id="conversion-slider",
                min=combo_group["conversion_rate"].min(),
                max=combo_group["conversion_rate"].max(),
                step=0.01,
                value=[combo_group["conversion_rate"].min(), combo_group["conversion_rate"].max()],
                marks={0.1: "0.1", 0.2: "0.2", 0.3: "0.3", 0.4: "0.4", 0.5: "0.5"}
            )
        ], style={"width": "50%", "display": "inline-block", "margin": "10px", "backgroundColor": "white"})
    ]),


    # url + page container
    dcc.Location(id="url", refresh=False),
    html.Div(id="page-content") # placeholder that will hold the active page

    ])

def layout_situations():
  return html.Div([dcc.Graph(id="plot1", figure=fig1)])

def layout_last_actions():
  return html.Div([dcc.Graph(id="plot2", figure=fig2)])

def layout_shot_types():
  return html.Div([dcc.Graph(id="plot3", figure=fig3)])

def layout_conversions():
  return html.Div([dcc.Graph(id="plot4", figure=fig4)])

def layout_top_combos():
  return html.Div([dcc.Graph(id="plot5", figure=fig5)])


# callbacks
@app.callback(Output("page-content", "children"),
              Input("url", "pathname"))
def display_page(pathname):
  if pathname == "/situations":
    return layout_situations()
  elif pathname == "/last-actions":
    return layout_last_actions()
  elif pathname == "/shot-types":
    return layout_shot_types()
  elif pathname == "/conversions":
    return layout_conversions()
  elif pathname == "/top-combos":
    return layout_top_combos()
  else: # HOME PAGE
    return html.Div([
        html.H2("Welcome!"),
        html.P("Use the navigation links above to explore different plots")
    ], style = {
        "backgroundColor": "white",
        "padding": "80px",
        "textAlign": "center"
    })


# filter fig 1 based on dropdown home/away
@app.callback(
    Output("plot1", "figure"),
    Input("homeaway-dropdown", "value")
)
def update_fig1(selected_h_a):
    # filter goals_df by home / away
    filtered = goals_df[goals_df['h_a'] == selected_h_a]

    # fallback to full dataframe if filtering is empty
    if selected_h_a is None:
      filtered = goals_df.copy()
    else:
      filtered = goals_df[goals_df['h_a'] == selected_h_a]

    # create updated figure
    fig = px.bar(filtered, x="situation",
                 color="h_a",
                 category_orders = {"situation": goals_df["situation"].value_counts().index},
                 title = "Relationship Between Situation and Goal Count")

    # add axis labels
    fig.update_xaxes(title_text="Situation")
    fig.update_yaxes(title_text="Goal Count")

    # add subtitle
    fig.update_layout(
        title={'text': "Relationship Between Situation and Goal Count<br><sup>Goals come from certain play situations</sup>",
               'x':0.5}
    )

    fig.update_traces(marker_line_width=0)
    return fig

# filter fig 4 based on conversion range
@app.callback(
    Output("plot4", "figure"),
    Input("conversion-slider", "value")
)
def update_fig4(conversion_range):
    filtered = agg_df.copy() # make a copy of the df to filter

    # filter by conversion rate range
    filtered = filtered[
        (filtered['is_goal'] >= conversion_range[0]) &
        (filtered['is_goal'] <= conversion_range[1])
    ]


    # create updated figure
    fig = px.line(filtered, x = "minute", y = "is_goal",
               title = "Goal Conversion Rate by Exact Minute")

    # add axis labels
    fig.update_xaxes(title_text="Minute")
    fig.update_yaxes(title_text="Conversion Rate")

    # add subtitle
    fig.update_layout(
        title={'text': "Goal Conversion Rate by Exact Minute<br><sup>Late goals have high conversion rates</sup>",
               'x':0.5}
    )


    fig.update_traces(mode="lines+markers", line=dict(width=2))
    return fig

# filter fig 5 based on dropdowns
@app.callback(
    Output("plot5", "figure"),
    Input("homeaway-dropdown", "value"),
    Input("conversion-slider", "value")
)
def update_fig5(selected_h_a, conversion_range):
    # filter combo_group by home / away; fallback if nothing is selected
    if selected_h_a is None:
      filtered = combo_group.copy()
    else:
      filtered = combo_group[combo_group['h_a'] == selected_h_a]

    # filter by conversion rate range
    filtered = filtered[
        (filtered['conversion_rate'] >= conversion_range[0]) &
        (filtered['conversion_rate'] <= conversion_range[1])
    ]

    # get top 5 combos in this filtered data
    top_filtered = filtered.sort_values('conversion_rate', ascending=False).head(5)

    # create combined label
    top_filtered = top_filtered.copy()
    top_filtered['combo'] = top_filtered['h_a'] + " | " + top_filtered['situation'] + " | " + top_filtered['shotType']

    # fallback to full dataframe if filtering gives empty
    if filtered.empty:
        top_filtered = top_combos.copy()

    # create updated figure
    fig = px.bar(top_filtered, x="conversion_rate", y="combo",
                 color="combo",
                 color_discrete_sequence=px.colors.qualitative.Vivid,
                 title="Top Conversion Combos")

    # add axis labels
    fig.update_xaxes(title_text="Conversion Rate")
    fig.update_yaxes(title_text="Combination of Factors")

    # add subtitle
    fig.update_layout(
        title={'text': "Formula for a Successful Shot<br><sup>These factors can contribute to successful shot conversion</sup>",
               'x':0.5}
    )

    fig.update_traces(marker_line_width=0)
    return fig

# run the app
if __name__ == "__main__":
  app.run(debug=True)
