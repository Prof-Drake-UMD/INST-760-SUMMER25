# -*- coding: utf-8 -*-
"""project_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J06lWplx6Wurtq21vLrwTI0z7pcVaBpC
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# read csv file
df = pd.read_csv("fullshotsdata.csv")

# display first five rows
df.head()

goals_df = df[df['result'] == "Goal"]

# create bar plot
g = sns.countplot(x = "situation",
            hue = "h_a",
            data = goals_df, order=goals_df['situation'].value_counts().index)


# cleaning up labels and adding titles
plt.xlabel("Situation")
plt.ylabel("Goal Count")

new_labels = ["Home", "Away"]
leg = g.legend()
for t, l in zip(leg.texts, new_labels):
    t.set_text(l)

plt.suptitle("Relationship Between Situation and Goal Count")
plt.title('Goals come from certain play situations', fontsize=10, color = "gray")

# save plot as image
plt.savefig("plot1.png", dpi=300, bbox_inches='tight')

# create new df for goals (boolean values)
goals_df = df[df['result'] == "Goal"]

# get the counts of each lastAction in goals
top_actions = goals_df['lastAction'].value_counts().nlargest(5).index

# filter to keep only top lastActions
filtered_goals = goals_df[goals_df['lastAction'].isin(top_actions)]

# create bar plot
g = sns.countplot(x = "lastAction", hue = "lastAction",
            data = filtered_goals)

# cleaning up labels and adding titles
plt.xlabel("Last Action")
plt.ylabel("Goal Count")


plt.suptitle("Relationship Between Last Action and Goal Count")
plt.title('Right Foot Creates Goals', fontsize=10, color = "gray")

# save plot as image
plt.savefig("plot2.png", dpi=300, bbox_inches='tight')

# create new df for goals (boolean values)
goals_df = df[df['result'] == "Goal"]

# create bar plot
g = sns.countplot(x = "shotType", hue = "shotType",
            data = goals_df)

# cleaning up labels and adding titles
plt.xlabel("Body Part Used")
plt.ylabel("Goal Count")

plt.suptitle("Relationship Between Body Part and Goal Count")
plt.title('Right Foot Creates Goals', fontsize=10, color = "gray")

# save plot as image
plt.savefig("plot3.png", dpi=300, bbox_inches='tight')

# create new column in df
df['is_goal'] = df['result'] == "Goal"

# create line plot
g = sns.relplot(x = "minute", y = "is_goal",
            data = df, kind = "line", errorbar = None)

# adding titles and cleaning up labels
g.fig.suptitle('Goal Conversion Rate by Exact Minute', y=1.05)
g.fig.text(0.5, 0.97, 'Late Goals Have High Conversion Rates', ha='center', fontsize=10, color='gray')
g.set_axis_labels('Minute', 'Conversion Rate')

# save plot as image
plt.savefig("plot4.png", dpi=300, bbox_inches='tight')

# group by discussed categories
combo_group = df.groupby(['h_a', 'situation', 'shotType']).agg(
    total_shots=('is_goal', 'count'),
    goals=('is_goal', 'sum')
).reset_index()

# calculate conversion rate
combo_group['conversion_rate'] = combo_group['goals'] / combo_group['total_shots']


# get the top five highest conversion combos
top_combos = combo_group.sort_values('conversion_rate', ascending=False).head(5)

# create combined label for plotting
top_combos['combo'] = top_combos['h_a'] + " | " + top_combos['situation'] + " | " + top_combos['shotType']

sns.barplot(data=top_combos,
            x='conversion_rate', y='combo', hue = 'combo',
            palette='magma')

# cleaning up labels and adding titles
plt.xlabel("Conversion Rate")
plt.ylabel("Combination")

plt.suptitle("Formula for a Successful Shot")
plt.title('These factors can contribute to a successful shot conversion', fontsize=10, color = "gray")

# save plot as image
plt.savefig("plot5.png", dpi=300, bbox_inches='tight')
