# -*- coding: utf-8 -*-
"""project_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MX9qCPKEoADecdNH53oLFlv9_xx-BBT4
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import plotly.express as px
import dash
from dash import dcc, html
from dash.dependencies import Input, Output

# read csv file
df = pd.read_csv("ev_specs.csv")

# display first five rows
df.head()

app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("Relationship Between Battery Capacity and Top Speed of EVs"),


    # create dropdown filters
    dcc.Dropdown(
        id = "filter-drivetrain",
        options=[{'label': val, 'value': val} for val in df['drivetrain'].unique()],
        placeholder = "select drivetrain",
        multi = False
    ),

    dcc.Dropdown(
        id = "filter-car_body_type",
        options=[{'label': val, 'value': val} for val in df['car_body_type'].unique()],
        placeholder = "select car body type",
        multi = False
    ),

    dcc.Dropdown(
        id = "filter-range_km",
        options=[{'label': val, 'value': val} for val in df['range_km'].unique()],
        placeholder = "select range",
        multi = False
    ),

    # graph placeholder
    dcc.Graph(id= "scatter-plot")

])

# callback
@app.callback(
    Output("scatter-plot", "figure"),
    Input("filter-drivetrain", "value"),
    Input("filter-car_body_type", "value"),
    Input("filter-range_km", "value")
)

def update_graph(drivetrain_val, car_body_type_val, range_km_val):
  # full dataframe
  filtered_df= df.copy()

  # apply filters if user selects them
  if drivetrain_val:
    filtered_df = filtered_df[filtered_df["drivetrain"] == drivetrain_val]
  if car_body_type_val:
    filtered_df = filtered_df[filtered_df["car_body_type"] == car_body_type_val]
  if range_km_val:
    filtered_df = filtered_df[filtered_df["range_km"] == range_km_val]

  # recreate scatter plot (original plot code, but with filtered data)
  fig = px.scatter(
    data_frame = filtered_df,
    x = "battery_capacity_kWh",
    y = "top_speed_kmh",
    color = "drivetrain",
    size = "range_km",
    symbol = "car_body_type",
    title = "Relationship Between Battery Capacity and Top Speed of EVs"
)
  return fig

# run the app
if __name__ == "__main__":
  app.run(debug=True)
